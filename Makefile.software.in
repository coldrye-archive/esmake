# vim: noexpandtab:ts=4:sw=4

# Copyright 2015-2016 Carsten Klein
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


build_dir       = ./build
build_cover_dir = $(build_dir)/cover
build_doc_dir   = $(build_dir)/doc
build_src_dir   = $(build_dir)/src
build_test_dir  = $(build_dir)/test
dist_dir        = ./dist
src_dir         = ./src
test_dir        = ./test
watchdog        = $(build_dir)/.watchdog

watchconfig     = ./.esdoc-pub.json ./.esdoc-dev.json ./.istanbul.yml ./.babelrc

node			= $$(which node || which nodejs)
nodever         = $$($(node) --version)

babel_istanbul  = $$(which babel-istanbul)

# dynamically created dummy test for making sure that all sources will be instrumented
covercurried    = $(build_test_dir)/covercurried-test.js

# must prevent these from failing on new project
sources         = $(shell find $(src_dir) -type f -name '*.es' || exit 0)
tests           = $(shell find $(test_dir) -type f -name '*.es' || exit 0)
fixtures		= $(shell find $(test_dir) -type d -name 'fixtures' || exit 0)


# project initialization / update
commons_src = ./node_modules/esmake/templates/software

init_commons_files = \
	$(commons_src)/README.md \
	$(commons_src)/LICENSE \
	$(commons_src)/package.json \
	$(commons_src)/.istanbul.yml \
	$(commons_src)/.babelrc \
	$(commons_src)/.eslintrc \

init_commons_gitignore_files = \
	$(commons_src)/_gitignore \

init_commons_dirs = \
	$(commons_src)/$(src_dir) \
	$(commons_src)/$(test_dir)

update_commons_files = \
	$(commons_src)/CONTRIBUTING.md \
    $(commons_src)/.babelrc \
	$(commons_src)/.esdoc-pub.json \
	$(commons_src)/.esdoc-dev.json \
	$(commons_src)/.travis.yml


.PHONY: build build-cover build-doc-$(doc) build-src build-test \
		build-fixtures cover check-cover clean clean-doc clean-build clean-cover \
		clean-dist deps deps-global deps-global-travis dist doc \
		lint test watch watch-run publish assert-master assert-changelog \
		init-commons update-commons update-changelog init-commons-files \
		init-commons-dirs update-commons-files


# internal
build: build-src build-test


# internal
build-cover: $(covercurried)
	@echo "gathering coverage data..."
	@echo "$(nodever)" | grep "^v0.12" >/dev/null && \
	BABEL_ENV=TEST node --harmony $(babel_istanbul) cover _mocha $(build_test_dir)/* || \
	BABEL_ENV=TEST $(babel_istanbul) cover _mocha $(build_test_dir)/*


# internal
build-doc-$(doc): $(sources)
	@echo "building $(subst build-doc-,,$(@)) docs..."
	@esdoc -c .esdoc-$(subst build-doc-,,$(@)).json


# internal
build-src: $(build_src_dir)


# internal
build-test: $(build_test_dir) build-fixtures


# internal
build-fixtures: $(fixtures)
	@echo "building fixtures..."
	@for DIR in $$(echo $? | tr ' ' '\n' | sort | uniq); do mkdir -p $(build_dir)/$$DIR; done
	@for DIR in $?; do cp -a $$DIR/* $(build_dir)/$$DIR/; done


# internal
check-cover: $(build_cover_dir)
	@echo "checking coverage..."
	@babel-istanbul check-coverage


# cleans both the build and dist directory
clean: clean-build clean-dist


# internal
clean-build:
	@echo "cleaning build..."
	@-rm -Rf $(build_dir)


# internal
clean-cover:
	@echo "cleaning coverage data..."
	@-rm -Rf $(build_cover_dir)


# internal
clean-dist:
	@echo "cleaning dist..."
	@-rm -Rf $(dist_dir)


# internal
clean-doc:
	@echo "cleaning docs..."
	@-rm -Rf $(build_doc_dir)


# generates the coverage data
cover: clean-build build build-cover check-cover


# installs local (dev) dependencies
deps:
	@echo "installing local (dev) dependencies..."
	@npm install
	# *sigh* npmjs will not install+update at the same time
	@npm update


# installs global dev dependencies
deps-global:
	@echo "installing global dev dependencies (sudo)..."
	@sudo npm -g install $(shell $(node) -e " \
		var pkg = require('./package.json'); \
		var deps = []; \
        for (var key in pkg.globalDevDependencies) { \
			var version = pkg.globalDevDependencies[key]; \
			if (version.indexOf('/') != -1) { \
				deps.push(version); \
			} \
			else { \
				deps.push('\"' + key + '@' + version + '\"'); \
			} \
		} \
		console.log(deps.join(' ')); \
    ")
	# *sigh* npmjs will not install+update at the same time
	@sudo npm -g update $(shell $(node) -e " \
		var pkg = require('./package.json'); \
		var deps = []; \
        for (var key in pkg.globalDevDependencies) { \
			var version = pkg.globalDevDependencies[key]; \
			if (version.indexOf('/') != -1) { \
				deps.push(version); \
			} \
			else { \
				deps.push('\"' + key + '@' + version + '\"'); \
			} \
		} \
		console.log(deps.join(' ')); \
    ")


deps-global-travis:
	@echo "installing global dev dependencies (travis)..."
	@npm -g install $(shell $(node) -e " \
		var pkg = require('./package.json'); \
		var deps = []; \
        for (var key in pkg.globalDevDependencies) { \
			var version = pkg.globalDevDependencies[key]; \
			if (version.indexOf('/') != -1) { \
				deps.push(version); \
			} \
			else { \
				deps.push('\"' + key + '@' + version + '\"'); \
			} \
		} \
		console.log(deps.join(' ')); \
    ")


# creates the distribution
dist: clean-dist lint cover
	@echo "creating distribution..."
# sigh: having to use --no-comments here since babel-cli overrides that .babelrc setting
	@BABEL_ENV="DIST" babel --no-comments -d $(dist_dir) $(src_dir) >/dev/null
	@cp *.md LICENSE $(dist_dir)/ >/dev/null
	@cat package.json | sed "s/>=/~/" > $(dist_dir)/package.json


# creates the apidocs
doc: clean-doc build-doc-$(doc)


# runs lint
lint: $(sources) $(tests)
	@echo "linting..."
	@eslint $?


publish: assert-master assert-changelog clean dist
	@cd ${dist_dir} && MASTER=1 npm publish


# tests everything
test: $(tests)
	@echo "running tests..."
	@BABEL_ENV="TEST" mocha --sort --compilers js:babel-core/register $?


# runs a perpetual watch on the sources and builds and
# generates new coverage data on each build
watch: clean
	@echo "watching... (CTRL-C to abort)"
	@while true; do make --quiet watch-run; sleep 1; done


# internal
watch-run: $(watchdog)
	@touch $?


# internal
$(watchdog): $(sources) $(tests) $(fixtures) $(watchconfig)
	@-make cover
	@-make doc
	@echo "watching... (CTRL-C to abort)"


# internal
$(build_src_dir):
	@echo "building sources..."
	@-mkdir $(build_dir) 2>/dev/null
	@-ln -f -s ../$(src_dir) $(build_dir)/


# internal
$(build_test_dir): $(tests)
	@echo "building tests..."
	@BABEL_ENV="BUILD" babel -d $(build_dir) $? >/dev/null


# internal
# make sure that all sources are covered
$(covercurried):
	@echo "currying coverage..."
	@-mkdir -p ${build_test_dir}
	@echo "var path = require('path'), glob = require('glob'), files = glob.sync('src/**/*.es');\
          while(files.length > 0) { var file = files.pop(); require(path.join('..', file)); }"\
		  >$(@)


# internal
assert-master:
	@git status | grep "On branch master" >/dev/null


# internal
assert-changelog:
	@grep $$(grep version package.json | tr -d ' ' | cut -f 2 -d ':' | cut -f 2 -d '"') CHANGELOG.md >/dev/null \
	 || (echo "CHANGELOG was not updated!" && exit 1)


# initialize build process related commons
init-commons: init-commons-files init-commons-gitignore-files init-commons-dirs update-commons
	@echo "please check your gear, especially README.md and package.json"


# internal
init-commons-files:
	@for file in $(init_commons_files); do \
	   test ! -f $$(basename $$file) && cp $$file .; \
	 done
	@touch CHANGELOG.md


# internal : *sigh* npm will filter out all .gitignore
init-commons-gitignore-files:
	@for file in $(init_commons_gitignore_files); do \
	   test ! -f .gitignore && cp $$file .gitignore; \
	 done


# internal
init-commons-dirs:
	@for dir in $(init_commons_dirs); do \
	   test ! -d $$(basename $$dir) && cp -r $$dir .; \
	 done


# updates build process related commons
update-commons: update-commons-files
	@echo "please check your gear, especially .travis.yml"


# internal
update-commons-files:
	@for file in $(update_commons_files); do \
	   cp $$file .; \
	 done


# updates the changelog
update-changelog:
	@conventional-changelog -i CHANGELOG.md -s -p coldrye
	@echo "make sure you check the changelog for any duplicates/errors"

